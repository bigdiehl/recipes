#!/usr/bin/env python3
"""
DESCRIPTION: Send an email with attachments via Gmail SMTP (recommended: use an
App Password).

Usage examples:
  # prompt for password and send
  python send_email_with_attachments.py \\
    --from you@gmail.com \\
    --to alice@gmail.com bob@gmail.com \\
    --subject "Photos" \\
    --body "Here are the photos." \\
    --attach /path/to/photo1.jpg /path/to/doc.pdf

  # read app password from env var GMAIL_APP_PASSWORD (safer)
  export GMAIL_APP_PASSWORD="your16charapppassword"
  python send_email_with_attachments.py ...

Notes:
- For Gmail: create an App Password in your Google Account (2FA required) and
  store it in GMAIL_APP_PASSWORD
- This script uses STARTTLS on smtp.gmail.com:587.
"""

import argparse
import os
import ssl
import mimetypes
import getpass
import smtplib
from email.message import EmailMessage
from pathlib import Path
from typing import List

SMTP_SERVER = "smtp.gmail.com"
SMTP_PORT = 587  # STARTTLS


# Note - this code generated by chatgpt. 
# Also see - https://stackoverflow.com/questions/3362600/how-to-send-email-attachments

def build_message(
    sender: str, recipients: List[str], subject: str, body: str, attachments: List[str]
) -> EmailMessage:
    msg = EmailMessage()
    msg["From"] = sender
    msg["To"] = ", ".join(recipients)
    msg["Subject"] = subject
    msg.set_content(body or "")

    for path in attachments or []:
        p = Path(path)
        if not p.exists() or not p.is_file():
            raise FileNotFoundError(f"Attachment not found: {path}")

        ctype, encoding = mimetypes.guess_type(p.as_posix())
        if ctype is None:
            ctype = "application/octet-stream"
        maintype, subtype = ctype.split("/", 1)

        with open(p, "rb") as f:
            data = f.read()

        msg.add_attachment(data, maintype=maintype, subtype=subtype, filename=p.name)

    return msg


def send_email(
    sender: str,
    password: str,
    recipients: List[str],
    message: EmailMessage,
    server: str = SMTP_SERVER,
    port: int = SMTP_PORT,
):
    context = ssl.create_default_context()
    with smtplib.SMTP(server, port) as smtp:
        smtp.ehlo()
        smtp.starttls(context=context)
        smtp.ehlo()
        smtp.login(sender, password)
        smtp.send_message(message, from_addr=sender, to_addrs=recipients)


def parse_args():
    p = argparse.ArgumentParser(
        description=__doc__,
        formatter_class=argparse.RawDescriptionHelpFormatter
    )
    p.add_argument(
        "--from",
        "-f",
        dest="sender",
        required=True,
        help="Sender email address (your Gmail)",
    )
    p.add_argument(
        "--to",
        "-t",
        dest="recipients",
        required=True,
        nargs="+",
        help="Recipient email addresses (one or more)",
    )
    p.add_argument("--subject", "-s", default="(no subject)", help="Email subject")
    p.add_argument("--body", "-b", default="", help="Plain-text body of the email")
    p.add_argument(
        "--attach",
        "-a",
        dest="attachments",
        nargs="*",
        default=[],
        help="Paths to attachment files",
    )
    p.add_argument(
        "--smtp-server",
        default=SMTP_SERVER,
        help="SMTP server hostname (default: smtp.gmail.com)",
    )
    p.add_argument(
        "--smtp-port",
        type=int,
        default=SMTP_PORT,
        help=f"SMTP port (default: {SMTP_PORT})",
    )
    return p.parse_args()


def main():
    args = parse_args()

    # Prefer environment variable for password (safer than plaintext)
    password = os.environ.get("GMAIL_APP_PASSWORD")
    if not password:
        prompt = f"App password for {args.sender} (input hidden): "
        password = getpass.getpass(prompt)

    try:
        msg = build_message(
            args.sender, args.recipients, args.subject, args.body, args.attachments
        )
    except Exception as e:
        print("Error building message:", e)
        raise

    try:
        send_email(
            args.sender,
            password,
            args.recipients,
            msg,
            server=args.smtp_server,
            port=args.smtp_port,
        )
        print(f"Email sent to {', '.join(args.recipients)}")
    except smtplib.SMTPAuthenticationError:
        print("Authentication failed. Check your email/password or App Password.")
        raise
    except Exception as e:
        print("Error sending email:", e)
        raise


if __name__ == "__main__":
    main()
